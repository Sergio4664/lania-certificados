from pydantic import BaseModel, ConfigDict
from typing import Optional, TYPE_CHECKING, List # ðŸ’¡ Importar List

# Importa los nuevos esquemas de salida que no tienen ciclos
if TYPE_CHECKING:
  from .participante import Participante, ParticipanteOut # ðŸ‘ˆ Importar 'ParticipanteOut'
from .producto_educativo import ProductoEducativoOut
from .certificado import CertificadoOut

class InscripcionBase(BaseModel):
  participante_id: int
producto_educativo_id: int

class InscripcionCreate(InscripcionBase):
 pass

# --- âœ… SOLUCIÃ“N: Esquema de salida sin recursiÃ³n ---
class InscripcionOut(InscripcionBase):
 id: int
# --- ðŸ’¡ CORRECCIÃ“N 2: Usar 'ParticipanteOut' para romper el ciclo ---
participante: 'ParticipanteOut' # ðŸ‘ˆ Usar el esquema simple 'Out'Â  Â  
producto_educativo: 'ProductoEducativoOut'
certificados: List['CertificadoOut'] = [] # ðŸ‘ˆ Cambiado a List (mejor prÃ¡ctica)
model_config = ConfigDict(from_attributes=True)

# Esquema completo para vistas de detalle si fuera necesario
class Inscripcion(InscripcionBase):
 id: int
 # --- ðŸ’¡ CORRECCIÃ“N 3: Usar 'ParticipanteOut' aquÃ­ tambiÃ©n por seguridad ---
participante: 'ParticipanteOut' # ðŸ‘ˆ Usar el esquema simple 'Out'

producto_educativo: 'ProductoEducativoOut'
certificados: List['CertificadoOut'] = [] # ðŸ‘ˆ Cambiado a List (mejor prÃ¡ctica)

model_config = ConfigDict(from_attributes=True)

class Config:
    from_attributes = True